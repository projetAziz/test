{"version":3,"file":"static/js/389.0b71fe2c.chunk.js","mappings":"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","sources":["../../src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":[null,"import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string }) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","BaseEvmAdapter","constructor","params","_defineProperty","clientId","this","provider","chainConfig","_this$chainConfig","chainId","WalletLoginError","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","clearToken","BaseAdapter","MetamaskAdapter","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","_","options","detectEthereumProvider","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","setAdapterSettings","getChainConfig","adapter","switchChain","disconnect","reconnected","cleanup","removeAllListeners","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}